apply plugin: 'java'
apply plugin: 'war'

/**
 * Gets the version name from the latest Git tag.
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// version = getVersionName()
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

task wrapper(type: Wrapper) {
    gradleVersion = "2.2"
    distributionUrl = 'http://services.gradle.org/distributions/gradle-2.2.1-all.zip'
}

ext {
    guava = "18.+"
    spring = "4.1.+"
    slf4j = "1.7.+"
    servlets = "3.1.+"
    gson = "2.+"
    junit = "4.+"
    springSecurity = "3.2.+"
    postgresql = "9.3-1102-jdbc4"
    h2 = "1.4.+"
    springData="1.7.0.RELEASE"
    hibernate="4.3.6.Final"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.springsource.org/release" }
}

dependencies {
    // Common
    compile "com.google.guava:guava:$guava"
    compile "commons-io:commons-io:2.4"

    compile "org.slf4j:slf4j-log4j12:$slf4j"

    compile "org.jetbrains:annotations:13.0"

    testCompile "junit:junit:$junit"
    testCompile "org.springframework:spring-test:$spring"

    // Web
    compile "org.springframework:spring-core:$spring"

    compile "org.springframework:spring-webmvc:$spring"
    compile "javax.servlet:javax.servlet-api:$servlets"

    compile "com.google.code.gson:gson:$gson"

    // Service
    compile "org.springframework:spring-context:$spring"

    compile "org.springframework.security:spring-security-web:$springSecurity"
    compile "org.springframework.security:spring-security-core:$springSecurity"
    compile "org.springframework.security:spring-security-config:$springSecurity"

    // Dao
    compile "org.springframework.data:spring-data-jpa:$springData"
    compile "org.hibernate:hibernate-entitymanager:$hibernate"
    compile "org.postgresql:postgresql:$postgresql"

    testCompile "com.h2database:h2:$h2"

    // Deploy
    runtime "org.mortbay.jetty:jetty-runner:8.1.1.v20120215"
    runtime "com.newrelic.agent.java:newrelic-agent:2.18.0"
}

task copyToLib << {
    copy {
        from configurations.runtime.copy().setTransitive(false)
        into "$buildDir/libs"
        rename { name ->
            def artifacts = configurations.runtime.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.name}.${artifact.extension}"
        }
    }
}

task stage(dependsOn: ["clean", "war", "copyToLib"])